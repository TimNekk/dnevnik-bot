import telebot
from telebot import types
import pickle
import os
import networking as nw
import scraping as s
import datetime
import secrets
from colorama import Fore
import re

bot = telebot.TeleBot('983970585:AAHtqErypinRDlQ7mPlUVC_dgfZ085CAGFk')  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞


# ---------------------------------------------------------------
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
# ---------------------------------------------------------------


@bot.message_handler(commands=['start', 'menu', 'help'])
def start_message_manager(message):
    users = get_users()

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if message.chat.id in users:
        user = users[message.chat.id]  # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—Å—è

        # –ï—Å—Ç—å –ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?
        if user['pages']:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—à—ë–ª –ø–æ –∏–Ω–≤–∞–π—Ç –∫–æ–¥—É?
            if user['from_invite_code']:
                # –°—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —ç—Ç–æ—Ç –∫–æ–¥?
                if is_invite_code_exist(user['invite_code']):
                    log(message, '–ú–µ–Ω—é —á–µ—Ä–µ–∑ –ò–Ω–≤–∞–π—Ç-–∫–æ–¥')

                    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
                    name = s.get_fio(user['pages']['timetable_now'])
                    grade, school = s.get_grade_and_school(user['pages']['timetable_now'])
                    text = f'–í–∞—Å –ø—Ä–∏–≥–ª–∞—Å–∏–ª {name}\n'
                    text += f'üè´ _{school} | {grade}_'
                    bot.send_message(message.chat.id, text, reply_markup=main_keyboard(from_invite_code=True),
                                     parse_mode='Markdown')
                else:
                    invite_code_was_deleted(message)
            else:
                log(message, '–ú–µ–Ω—é —á–µ—Ä–µ–∑ –ª–æ–≥–∏–Ω')

                # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
                name = s.get_fio(user['pages']['timetable_now'])
                grade, school = s.get_grade_and_school(user['pages']['timetable_now'])
                text = f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {name}\n'
                text += f'üè´ _{school} | {grade}_'
                bot.send_message(message.chat.id, text, reply_markup=main_keyboard(), parse_mode='Markdown')
        else:
            set_user_pages(message)

    # –ï—Å–ª–∏ –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    else:
        log(message, '–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')

        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—Å—è
        user = create_user()
        users[message.chat.id] = user

        # –°—É—â–µ—Å–≤—É–µ—Ç –ª–∏ –ò–Ω–≤–∞–π—Ç-–∫–æ–¥, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        invite_code = if_user_had_invite_code(message)
        if invite_code:
            user['invite_code'] = invite_code

        save_users(users)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        if message.from_user.first_name:  # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∏–∫ –∏–ª–∏ –∏–º—è
            text = f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!'
        else:
            text = f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.username}!'
        text += '\n–Ø - –î–Ω–µ–≤–Ω–∏–∫ –ë–æ—Ç üòÑ\n\n–ú–æ–∂–µ—à—å –≤–æ–π—Ç–∏ –≤ —Å–≤–æ—é —É—á–µ—Ç–Ω—É—é –∑–∞–ø–∏—Å—å –∏–ª–∏ –≤–≤–µ—Å—Ç–∏ –∏–Ω–≤–∞–π—Ç-–∫–æ–¥'
        bot.send_message(message.chat.id, text, reply_markup=keyboard_new_user())


# ---------------------------------------------------------------
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ Callback
# ---------------------------------------------------------------


@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    # –í–æ–π—Ç–∏
    if call.data == 'login':
        log(call.message, '–í—Ö–æ–¥ –ø–æ –ª–æ–≥–∏–Ω—É')
        bot.delete_message(call.message.chat.id, call.message.message_id)  # –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        get_user_login(call.message)  # –ü–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏–Ω –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –ò–Ω–≤–∞–π—Ç-–∫–æ–¥
    elif call.data == 'invite-code':
        log(call.message, '–í—Ö–æ–¥ –ø–æ –∏–Ω–≤–∞–π—Ç-–∫–æ–¥—É')
        bot.delete_message(call.message.chat.id, call.message.message_id)  # –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        use_invite_code(call.message)

    # –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    elif call.data == 'main_menu':
        bot.delete_message(call.message.chat.id, call.message.message_id)  # –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        start_message_manager(call.message)  # –ü–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏–Ω –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    elif call.data == 'timetable':
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        text = '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å'
        bot.edit_message_text(text, call.message.chat.id, call.message.message_id,
                              reply_markup=timetable_keyboard())

    # –°–µ–≥–æ–¥–Ω—è
    elif call.data == 'timetable_today':
        weekday = datetime.date.today().weekday()  # –°–µ–≥–æ–¥–Ω—è
        if weekday == 5 or weekday == 6:  # –ï—Å–ª–∏ —Å—É–±–±–æ—Ç–∞ –∏–ª–∏ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω–∏–µ
            weekday = 4  # –¢–æ–≥–¥–∞ –ø—è—Ç–Ω–∏—Ü–∞
        send_timetable(call.message, weekday, 'timetable_now')

    # –ó–∞–≤—Ç—Ä–∞
    elif call.data == 'timetable_tomorrow':
        weekday = (datetime.date.today() + datetime.timedelta(days=1)).weekday()  # –ó–∞–≤—Ç—Ä–∞
        if weekday == 5 or weekday == 6 or weekday == 0:  # –ï—Å–ª–∏ —Å—É–±–±–æ—Ç–∞ –∏–ª–∏ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω–∏–µ
            weekday = 0  # –¢–æ–≥–¥–∞ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
            send_timetable(call.message, weekday, 'timetable_next')
        else:
            send_timetable(call.message, weekday, 'timetable_now')

    # –î—Ä—É–≥–æ–π –¥–µ–Ω—å
    elif call.data == 'timetable_weeks':
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        text = '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–¥–µ–ª—é'
        bot.edit_message_text(text, call.message.chat.id, call.message.message_id,
                              reply_markup=weeks_keyboard())

    # –ü—Ä–æ—à–ª–∞—è –Ω–µ–¥–µ–ª—è
    elif call.data == 'timetable_pre':
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        text = '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–∞ –ø—Ä–æ—à–ª–æ–π –Ω–µ–¥–µ–ª–µ'
        bot.edit_message_text(text, call.message.chat.id, call.message.message_id,
                              reply_markup=days_pre_keyboard())
    elif call.data == 'timetable_pre_0':
        send_timetable(call.message, 0, 'timetable_pre')
    elif call.data == 'timetable_pre_1':
        send_timetable(call.message, 1, 'timetable_pre')
    elif call.data == 'timetable_pre_2':
        send_timetable(call.message, 2, 'timetable_pre')
    elif call.data == 'timetable_pre_3':
        send_timetable(call.message, 3, 'timetable_pre')
    elif call.data == 'timetable_pre_4':
        send_timetable(call.message, 4, 'timetable_pre')
    elif call.data == 'timetable_pre_5':
        send_timetable(call.message, 5, 'timetable_pre')

    # –¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è
    elif call.data == 'timetable_now':
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        text = '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–∞ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–µ'
        bot.edit_message_text(text, call.message.chat.id, call.message.message_id,
                              reply_markup=days_now_keyboard())
    elif call.data == 'timetable_now_0':
        send_timetable(call.message, 0, 'timetable_now')
    elif call.data == 'timetable_now_1':
        send_timetable(call.message, 1, 'timetable_now')
    elif call.data == 'timetable_now_2':
        send_timetable(call.message, 2, 'timetable_now')
    elif call.data == 'timetable_now_3':
        send_timetable(call.message, 3, 'timetable_now')
    elif call.data == 'timetable_now_4':
        send_timetable(call.message, 4, 'timetable_now')
    elif call.data == 'timetable_now_5':
        send_timetable(call.message, 5, 'timetable_now')

    # –°–ª–µ–¥. –Ω–µ–¥–µ–ª—è
    elif call.data == 'timetable_next':
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        text = '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–∞ —Å–ª–µ–¥. –Ω–µ–¥–µ–ª–µ'
        bot.edit_message_text(text, call.message.chat.id, call.message.message_id,
                              reply_markup=days_next_keyboard())
    elif call.data == 'timetable_next_0':
        send_timetable(call.message, 0, 'timetable_next')
    elif call.data == 'timetable_next_1':
        send_timetable(call.message, 1, 'timetable_next')
    elif call.data == 'timetable_next_2':
        send_timetable(call.message, 2, 'timetable_next')
    elif call.data == 'timetable_next_3':
        send_timetable(call.message, 3, 'timetable_next')
    elif call.data == 'timetable_next_4':
        send_timetable(call.message, 4, 'timetable_next')
    elif call.data == 'timetable_next_5':
        send_timetable(call.message, 5, 'timetable_next')

    # –ù–∞—Å—Ç—Ç—Ä–æ–π–∫–∏
    elif call.data == 'settings':
        send_settings(call.message)
    # –°–æ–∑–¥–∞—Ç—å –∏–Ω–≤–∞–π—Ç-–∫–æ–¥
    elif call.data == 'create_invite_code':
        create_invite_code(call.message)
    # –£–¥–∞–ª–∏—Ç—å –∏–Ω–≤–∞–π—Ç-–∫–æ–¥
    elif call.data == 'delete_invite_code':
        delete_invite_code(call.message)
    # –í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞
    elif call.data == 'logout':
        bot.delete_message(call.message.chat.id, call.message.message_id)  # –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        logout(call.message)

    elif call.data == 'change_k':
        change_k(call.message)
    # –û—Ü–µ–Ω–∫–∏
    elif call.data == 'marks':
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        text = '–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é'
        bot.edit_message_text(text, call.message.chat.id, call.message.message_id,
                              reply_markup=marks_keyboard())

    # –í—Å–µ –æ—Ü–µ–Ω–∫–∏
    elif call.data == 'all_marks':
        periods_manger(call.message)
    elif call.data == 'period_1':
        send_all_marks(call.message, 0)
    elif call.data == 'period_2':
        send_all_marks(call.message, 1)
    elif call.data == 'period_3':
        send_all_marks(call.message, 2)

    # –ê–Ω–∞–ª–∏–∑
    elif call.data == 'analysis':
        periods_manger(call.message, analysis=True)
    elif call.data == 'period_1_a':
        send_analysis(call.message, 0)
    elif call.data == 'period_2_a':
        send_analysis(call.message, 1)
    elif call.data == 'period_3_a':
        send_analysis(call.message, 2)


# ---------------------------------------------------------------
# –§—É–Ω–∫—Ü–∏–∏
# ---------------------------------------------------------------


def change_k(message):
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    text = '*–í–≤–µ–¥–∏—Ç–µ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è –≤ –≤–∞—à–µ–º –∫–ª–∞—Å—Å–µ*\n\n'

    text += '_–ü—Ä–∏–º–µ—Ä 1:_\n–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è: `0.60` \n'
    text += '  –°—Ä–µ–¥–Ω–∏–π –±–∞–ª: *4.59* –∏–ª–∏ *–Ω–∏–∂–µ*\n  –í –≥–æ–¥—É –æ—Ü–µ–Ω–∫–∞ –≤—ã–¥–µ—Ç: *4*\n'
    text += '  –°—Ä–µ–¥–Ω–∏–π –±–∞–ª: *4.60* –∏–ª–∏ *–≤—ã—à–µ*\n  –í –≥–æ–¥—É –æ—Ü–µ–Ω–∫–∞ –≤—ã–¥–µ—Ç: *5*\n\n'

    text += '_–ü—Ä–∏–º–µ—Ä 2:_\n–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è: `0.54` \n'
    text += '  –°—Ä–µ–¥–Ω–∏–π –±–∞–ª: *3.53* –∏–ª–∏ *–Ω–∏–∂–µ*\n  –í –≥–æ–¥—É –æ—Ü–µ–Ω–∫–∞ –≤—ã–¥–µ—Ç: *3*\n'
    text += '  –°—Ä–µ–¥–Ω–∏–π –±–∞–ª: *3.54* –∏–ª–∏ *–≤—ã—à–µ*\n  –í –≥–æ–¥—É –æ—Ü–µ–Ω–∫–∞ –≤—ã–¥–µ—Ç: *4*\n\n'

    text += '_–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è_: `0.60`'

    msg = bot.edit_message_text(text, message.chat.id, message.message_id, parse_mode='Markdown')

    bot.register_next_step_handler(msg, process_k)


def process_k(message):
    # –£–¥–∞–ª–µ–Ω–∏–µ 2 –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    for i in range(2):
        bot.delete_message(message.chat.id, message.message_id - i)

    # –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    users = get_users()
    user = users[message.chat.id]

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è
    k = message.text
    try:
        re.findall(r'0[.]\d+', k)[0]  # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ—ç—Ñ.
        user['k'] = k
        save_users(users)
        log(message, f'–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è - {k}')

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        text = '‚úÖ *–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω* ‚úÖ'
        bot.send_message(message.chat.id, text, parse_mode='Markdown')
    except IndexError:
        log(message, f'{Fore.RED}–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è')

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        text = '‚ùå *–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç* ‚ùå'
        bot.send_message(message.chat.id, text, parse_mode='Markdown')

    start_message_manager(message)


def send_analysis(message, period):
    # –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    users = get_users()
    user = users[message.chat.id]
    k = user['k']  # –ö–æ—ç—Ñ.

    subjects = s.get_analysis(user['pages']['marks'], period, k)

    if subjects:
        text = f'–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è: `{k}`\n\n'
        for subject in subjects:
            text += f'*{subject["name"]} | {subject["avg_mark"]}*\n'

            # –ï—â–µ –æ—Ü–µ–Ω–æ–∫
            marks_left = subject["marks_left"]
            for mark_left in marks_left:
                if marks_left:
                    text += f'{mark_left}\n'
            text += '\n\n'
    else:
        text = '–û—Ü–µ–Ω–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç'

    bot.edit_message_text(text, message.chat.id, message.message_id, reply_markup=back_keyboard(),
                          parse_mode='Markdown')


def send_all_marks(message, period):
    # –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    users = get_users()
    user = users[message.chat.id]

    subjects = s.get_marks(user['pages']['marks'], period)

    # –ï—Å—Ç—å –ª–∏ –æ—Ü–µ–Ω–∫–∏ –≤ —ç—Ç–æ–º –ø–µ—Ä–∏–æ–¥–µ
    if subjects:
        text = ''
        for subject in subjects:
            text += f'*{subject["name"]} | {subject["avg_mark"]}*\n_'

            # –û—Ü–µ–Ω–∫–∏
            marks = subject["marks"]
            for mark in marks:
                text += f'{mark}  '
            text += '_\n\n'
    else:
        text = '–û—Ü–µ–Ω–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç'

    bot.edit_message_text(text, message.chat.id, message.message_id, reply_markup=back_keyboard(),
                          parse_mode='Markdown')


def periods_manger(message, analysis=False):
    # –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    users = get_users()
    user = users[message.chat.id]

    periods_count = s.get_periods_count(user['pages']['marks'])  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–∏–æ–¥–æ–≤

    if periods_count == 2:  # –ü–æ–ª—É–≥–æ–¥–∏—è
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        text = '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—É–≥–æ–¥–∏–µ'
        if analysis:
            if user['k']:  # –ï—Å–ª–∏ –∑–∞–¥–∞–Ω –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
                bot.edit_message_text(text, message.chat.id, message.message_id, reply_markup=periods_2_analysis_keyboard())
            else:
                change_k(message)
        else:
            bot.edit_message_text(text, message.chat.id, message.message_id, reply_markup=periods_2_all_marks_keyboard())
    elif periods_count == 3:  # –¢—Ä–∏–º–µ—Å—Ç—Ä—ã
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        text = '–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–∏–º–µ—Å—Ç—Ä'
        if analysis:
            if user['k']:  # –ï—Å–ª–∏ –∑–∞–¥–∞–Ω –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
                bot.edit_message_text(text, message.chat.id, message.message_id, reply_markup=periods_3_all_marks_keyboard())
            else:
                change_k(message)
        else:
            bot.edit_message_text(text, message.chat.id, message.message_id, reply_markup=periods_3_analysis_keyboard())
    else:
        log(message, f'–û–û–û–ú–ú–ú–ì–ì–ì–ì –ù–û–í–´–ô –í–ò–î –ü–ï–†–ò–û–î–û–í - {Fore.RED}{periods_count}')


def delete_invite_code(message):
    # –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    users = get_users()
    user = users[message.chat.id]
    invite_code = user['invite_code']

    remove_invite_code(invite_code, message)  # –£–¥–∞–ª–µ–Ω–∏–µ –∏–Ω–≤–∞–π—Ç-–∫–æ–¥–∞

    user['invite_code'] = False
    save_users(users)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    text = f'–ò–Ω–≤–∞–π—Ç-–∫–æ–¥: `{invite_code}` –±—ã–ª —É–¥–∞–ª–µ–Ω'
    bot.edit_message_text(text, message.chat.id, message.message_id, reply_markup=back_invite_code_keyboard(),
                          parse_mode='Markdown')


def invite_code_was_deleted(message):
    # –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    users = get_users()
    user = users[message.chat.id]

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    text = f'–í–∞—à –ò–Ω–≤–∞–π—Ç-–∫–æ–¥ –±—ã–ª —É–¥–∞–ª—ë–Ω —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º'
    bot.send_message(message.chat.id, text, reply_markup=invite_code_was_deleted_keyboard(),
                     parse_mode='Markdown')


def logout(message):
    log(message, f'–í—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞')
    delete_user(message)
    start_message_manager(message)


def create_invite_code(message):
    # –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    users = get_users()
    user = users[message.chat.id]

    invite_code = new_invite_code(message)  # –°–æ—Ö–¥–∞–Ω–∏–µ –∏–Ω–≤–∞–π—Ç-–∫–æ–¥–∞

    user['invite_code'] = invite_code
    save_users(users)

    log(message, f'–°–æ–∑–¥–∞–Ω –ò–Ω–≤–∞–π—Ç-–∫–æ–¥ - {Fore.MAGENTA}{invite_code}')

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    text = f'–í–∞—à –∏–Ω–≤–∞–π—Ç-–∫–æ–¥: `{invite_code}`\n_(–ù–∞–∂–º–∏ –Ω–∞ –∫–æ–¥ —á—Ç–æ-–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å)_'
    bot.edit_message_text(text, message.chat.id, message.message_id, reply_markup=back_invite_code_keyboard(),
                          parse_mode='Markdown')


def use_invite_code(message):
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    text = '–í–≤–µ–¥–∏—Ç–µ *–ò–Ω–≤–∞–π—Ç-–∫–æ–¥*'
    msg = bot.send_message(message.chat.id, text, parse_mode='Markdown')

    bot.register_next_step_handler(msg, process_invite_code)


def process_invite_code(message):
    invite_codes = get_invite_codes()
    invite_code = message.text  # –ö–æ–¥ –≤–≤–µ–¥—ë–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º

    log(message, f'–ò–Ω–≤–∞–π—Ç-–∫–æ–¥ - {Fore.MAGENTA}{invite_code}')

    # –°—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∏–Ω–≤–∞–π—Ç-–∫–æ–¥
    if invite_code in invite_codes:
        # –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        users = get_users()
        user = users[message.chat.id]

        # –°—É—â–µ—Å–≤—É–µ—Ç –ª–∏ –ò–Ω–≤–∞–π—Ç-–∫–æ–¥, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        if user['invite_code']:
            remove_invite_code(user['invite_code'], message)

        invite_code_data = invite_codes[invite_code]  # –î–∞–Ω–Ω—ã–µ –∏–Ω–≤–∞–π—Ç-–∫–æ–¥–∞

        user['login'] = invite_code_data['login']
        user['password'] = invite_code_data['password']
        user['invite_code'] = invite_code
        user['from_invite_code'] = True
        save_users(users)
        log(message, f'{Fore.GREEN}–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã')
    else:
        log(message, f'{Fore.RED}–í–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –ò–Ω–≤–∞–π—Ç-–∫–æ–¥')
        delete_user(message)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        text = '‚ùå *–ù–µ–≤–µ—Ä–Ω—ã–π –ò–Ω–≤–∞–π—Ç-–∫–æ–¥* ‚ùå'
        bot.send_message(message.chat.id, text, parse_mode='Markdown')

    # –£–¥–∞–ª–µ–Ω–∏–µ 2 –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    for i in range(2):
        bot.delete_message(message.chat.id, message.message_id - i)

    start_message_manager(message)


def send_settings(message):
    # –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    users = get_users()
    user = users[message.chat.id]

    # –ò–Ω–≤–∞–π—Ç-–∫–æ–¥
    text = '–ò–Ω–≤–∞–π—Ç-–∫–æ–¥: '
    if user['invite_code']:
        text += f'`{user["invite_code"]}`'
    else:
        text += '–Ω–µ —Å–æ–∑–¥–∞–Ω'

    # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è
    if not user['from_invite_code']:
        text += '\n–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è: '
        if user['k']:
            text += f'*{user["k"]}*'
        else:
            text += '–Ω–µ –∑–∞–¥–∞–Ω'

    bot.edit_message_text(text, message.chat.id, message.message_id, reply_markup=settings_keyboard(user),
                          parse_mode='Markdown')


def send_timetable(message, weekday, page_name):
    # –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    users = get_users()
    user = users[message.chat.id]

    # –ü–æ–ª—É—á–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    lessons = s.get_timetable(user['pages'][page_name], weekday)
    numbers = ['1Ô∏è‚É£', '2Ô∏è‚É£', '3Ô∏è‚É£', '4Ô∏è‚É£', '5Ô∏è‚É£', '6Ô∏è‚É£', '7Ô∏è‚É£']  # –ö–≤–∞–¥—Ä–∞—Ç–∏–∫–∏ —Å —Ü–∏—Ñ—Ä–∞–º–∏
    if lessons:
        text = ''
        for i, lesson in enumerate(lessons, 0):  # –ü—Ä–æ—Ö–æ–¥ —á–µ—Ä–µ–∑ –≤—Å–µ —É—Ä–æ–∫–∏
            # –ù–∞–∑–≤–∞–Ω–∏–µ
            text += f'*{numbers[i]} {lesson[0]}'

            # –û—Ü–µ–Ω–∫–∏
            if lesson[2]:
                text += ' | '
                for mark in lesson[2]:
                    text += f'{mark} '
            text += '*'

            # –ó–∞–¥–∞–Ω–∏–µ
            if lesson[1]:
                text += f'\n_{lesson[1]}_\n\n'
            else:
                text += '\n\n'
    else:
        text = '–ù–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è'

    bot.edit_message_text(text, message.chat.id, message.message_id, reply_markup=back_keyboard(),
                          parse_mode='Markdown')


def get_user_login(message):
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    text = '–í–≤–µ–¥–∏—Ç–µ *–õ–æ–≥–∏–Ω* _(—Ç–µ–ª–µ—Ñ–æ–Ω, email –∏–ª–∏ –°–ù–ò–õ–°)_'
    msg = bot.send_message(message.chat.id, text, parse_mode='Markdown')

    bot.register_next_step_handler(msg, process_user_login)


def process_user_login(message):
    # –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    users = get_users()
    user = users[message.chat.id]

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ª–æ–≥–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    login = message.text
    user['login'] = login
    save_users(users)

    log(message, f'–õ–æ–≥–∏–Ω - {Fore.MAGENTA}{login}')

    get_user_password(message)


def get_user_password(message):
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    text = '–í–≤–µ–¥–∏—Ç–µ *–ü–∞—Ä–æ–ª—å*'
    msg = bot.send_message(message.chat.id, text, parse_mode='Markdown')

    bot.register_next_step_handler(msg, process_user_password)


def process_user_password(message):
    # –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    users = get_users()
    user = users[message.chat.id]

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    password = message.text
    user['password'] = password
    save_users(users)

    log(message, f'–ü–∞—Ä–æ–ª—å - {Fore.MAGENTA}{password}')

    # –£–¥–∞–ª–µ–Ω–∏–µ 4 –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    for i in range(4):
        bot.delete_message(message.chat.id, message.message_id - i)

    set_user_pages(message)


def set_user_pages(message):
    # –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    users = get_users()
    user = users[message.chat.id]

    try:
        pages = nw.get_diary_pages(user['login'], user['password'])

        if pages:
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user['pages']['timetable_now'] = pages[0]
            user['pages']['timetable_next'] = pages[1]
            user['pages']['timetable_pre'] = pages[2]
            user['pages']['marks'] = pages[3]
            log(message, f'{Fore.GREEN}–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã')
            save_users(users)
        else:
            log(message, f'{Fore.RED}–í–≤–µ–¥–µ–Ω—ã –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ')
            delete_user(message)

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            text = '‚ùå *–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ* ‚ùå'
            bot.send_message(message.chat.id, text, parse_mode='Markdown')

    except Exception as e:  # –û—à–∏–±–∫–∞ networking
        log(message, f'{Fore.RED}–û—à–∏–±–∫–∞ networking:\n{e.args}')
        delete_user(message)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        text = '‚ö†Ô∏è *–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è* ‚ö†Ô∏è\n–ü_–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑_'
        bot.send_message(message.chat.id, text, parse_mode='Markdown')

    start_message_manager(message)


# ---------------------------------------------------------------
# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
# ---------------------------------------------------------------


def periods_2_analysis_keyboard():
    keyboard = types.InlineKeyboardMarkup()
    b1 = types.InlineKeyboardButton('–ü–µ—Ä–≤–æ–µ', callback_data='period_1_a')
    b2 = types.InlineKeyboardButton('–í—Ç–æ—Ä–æ–µ', callback_data='period_2_a')
    keyboard.add(b1, b2)

    # –ö–Ω–æ–ø–∫–∞ –ù–∞–∑–∞–¥
    back_b = types.InlineKeyboardButton('–ù–∞–∑–∞–¥ ‚Ü©Ô∏è', callback_data='marks')
    keyboard.add(back_b)
    return keyboard


def periods_3_analysis_keyboard():
    keyboard = types.InlineKeyboardMarkup()
    b1 = types.InlineKeyboardButton('–ü–µ—Ä–≤—ã–π', callback_data='period_1_a')
    b2 = types.InlineKeyboardButton('–í—Ç–æ—Ä–æ–π', callback_data='period_2_a')
    b2 = types.InlineKeyboardButton('–¢—Ä–µ—Ç–∏–π', callback_data='period_2_a')
    keyboard.add(b1, b2)

    # –ö–Ω–æ–ø–∫–∞ –ù–∞–∑–∞–¥
    back_b = types.InlineKeyboardButton('–ù–∞–∑–∞–¥ ‚Ü©Ô∏è', callback_data='marks')
    keyboard.add(back_b)
    return keyboard


def periods_2_all_marks_keyboard():
    keyboard = types.InlineKeyboardMarkup()
    b1 = types.InlineKeyboardButton('–ü–µ—Ä–≤–æ–µ', callback_data='period_1')
    b2 = types.InlineKeyboardButton('–í—Ç–æ—Ä–æ–µ', callback_data='period_2')
    keyboard.add(b1, b2)

    # –ö–Ω–æ–ø–∫–∞ –ù–∞–∑–∞–¥
    back_b = types.InlineKeyboardButton('–ù–∞–∑–∞–¥ ‚Ü©Ô∏è', callback_data='marks')
    keyboard.add(back_b)
    return keyboard


def periods_3_all_marks_keyboard():
    keyboard = types.InlineKeyboardMarkup()
    b1 = types.InlineKeyboardButton('–ü–µ—Ä–≤—ã–π', callback_data='period_1')
    b2 = types.InlineKeyboardButton('–í—Ç–æ—Ä–æ–π', callback_data='period_2')
    b2 = types.InlineKeyboardButton('–¢—Ä–µ—Ç–∏–π', callback_data='period_2')
    keyboard.add(b1, b2)

    # –ö–Ω–æ–ø–∫–∞ –ù–∞–∑–∞–¥
    back_b = types.InlineKeyboardButton('–ù–∞–∑–∞–¥ ‚Ü©Ô∏è', callback_data='marks')
    keyboard.add(back_b)
    return keyboard


def marks_keyboard():
    keyboard = types.InlineKeyboardMarkup()
    b1 = types.InlineKeyboardButton('–í—Å–µ –æ—Ü–µ–Ω–∫–∏', callback_data='all_marks')
    b2 = types.InlineKeyboardButton('–ê–Ω–∞–ª–∏–∑', callback_data='analysis')
    keyboard.add(b1, b2)

    # –ö–Ω–æ–ø–∫–∞ –ù–∞–∑–∞–¥
    back_b = types.InlineKeyboardButton('–ù–∞–∑–∞–¥ ‚Ü©Ô∏è', callback_data='main_menu')
    keyboard.add(back_b)
    return keyboard


def invite_code_was_deleted_keyboard():
    keyboard = types.InlineKeyboardMarkup()
    b1 = types.InlineKeyboardButton('–í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞', callback_data='logout')
    keyboard.add(b1)
    return keyboard


def back_invite_code_keyboard():
    keyboard = types.InlineKeyboardMarkup()
    back_b = types.InlineKeyboardButton('–ù–∞–∑–∞–¥ ‚Ü©Ô∏è', callback_data='settings')
    keyboard.add(back_b)
    return keyboard


def settings_keyboard(user):
    keyboard = types.InlineKeyboardMarkup()

    if not user['from_invite_code']:  # –í—Ö–æ–¥ –ø–æ –ª–æ–≥–∏–Ω—É
        if not user['invite_code']:  # –ù–µ—Ç –ò–Ω–≤–∞–π—Ç-–∫–æ–¥
            b1 = types.InlineKeyboardButton('–°–æ–∑–¥–∞—Ç—å –∏–Ω–≤–∞–π—Ç-–∫–æ–¥', callback_data='create_invite_code')
        else:
            b1 = types.InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å –∏–Ω–≤–∞–π—Ç-–∫–æ–¥', callback_data='delete_invite_code')
        b2 = types.InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ—ç—Ñ. –æ–∫—Ä—É–≥–ª.', callback_data='change_k')
        keyboard.add(b1)
        keyboard.add(b2)

    b3 = types.InlineKeyboardButton('–í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞', callback_data='logout')
    keyboard.add(b3)

    # –ö–Ω–æ–ø–∫–∞ –ù–∞–∑–∞–¥
    back_b = types.InlineKeyboardButton('–ù–∞–∑–∞–¥ ‚Ü©Ô∏è', callback_data='main_menu')
    keyboard.add(back_b)
    return keyboard


def back_keyboard():
    keyboard = types.InlineKeyboardMarkup()
    back_b = types.InlineKeyboardButton('–ù–∞–∑–∞–¥ ‚Ü©Ô∏è', callback_data='main_menu')
    keyboard.add(back_b)
    return keyboard


def keyboard_new_user():
    keyboard = types.InlineKeyboardMarkup()
    b1 = types.InlineKeyboardButton('–í–æ–π—Ç–∏', callback_data='login')
    b2 = types.InlineKeyboardButton('–ò–Ω–≤–∞–π—Ç-–∫–æ–¥', callback_data='invite-code')
    keyboard.add(b1, b2)
    return keyboard


def main_keyboard(from_invite_code=False):
    keyboard = types.InlineKeyboardMarkup()

    # –ö–Ω–æ–ø–∫–∞ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    b1 = types.InlineKeyboardButton('–î–Ω–µ–≤–Ω–∏–∫', callback_data='timetable')

    # –ö–Ω–æ–ø–∫–∞ –û—Ü–µ–Ω–∫–∏
    if not from_invite_code:
        b2 = types.InlineKeyboardButton('–û—Ü–µ–Ω–∫–∏', callback_data='marks')
        keyboard.add(b1, b2)
    else:
        keyboard.add(b1)

    # –ö–Ω–æ–ø–∫–∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    b3 = types.InlineKeyboardButton('–ù–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data='settings')
    keyboard.add(b3)
    return keyboard


def timetable_keyboard():
    keyboard = types.InlineKeyboardMarkup()
    b1 = types.InlineKeyboardButton('–°–µ–≥–æ–¥–Ω—è', callback_data='timetable_today')
    b2 = types.InlineKeyboardButton('–ó–∞–≤—Ç—Ä–∞', callback_data='timetable_tomorrow')
    b3 = types.InlineKeyboardButton('–î—Ä—É–≥–æ–π –¥–µ–Ω—å', callback_data='timetable_weeks')
    keyboard.add(b1, b2, b3)

    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    back_b = types.InlineKeyboardButton('–ù–∞–∑–∞–¥ ‚Ü©Ô∏è', callback_data='main_menu')
    keyboard.add(back_b)
    return keyboard


def weeks_keyboard():
    keyboard = types.InlineKeyboardMarkup()
    b1 = types.InlineKeyboardButton('–ü—Ä–æ—à–ª–∞—è', callback_data='timetable_pre')
    b2 = types.InlineKeyboardButton('–¢–µ–∫—É—â–∞—è', callback_data='timetable_now')
    b3 = types.InlineKeyboardButton('–°–ª–µ–¥.', callback_data='timetable_next')
    keyboard.add(b1, b2, b3)

    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    back_b = types.InlineKeyboardButton('–ù–∞–∑–∞–¥ ‚Ü©Ô∏è', callback_data='timetable')
    keyboard.add(back_b)
    return keyboard


def days_pre_keyboard():
    keyboard = types.InlineKeyboardMarkup()
    b1 = types.InlineKeyboardButton('–ü–Ω', callback_data='timetable_pre_0')
    b2 = types.InlineKeyboardButton('–í—Ç', callback_data='timetable_pre_1')
    b3 = types.InlineKeyboardButton('–°—Ä', callback_data='timetable_pre_2')
    b4 = types.InlineKeyboardButton('–ß—Ç', callback_data='timetable_pre_3')
    b5 = types.InlineKeyboardButton('–ü—Ç', callback_data='timetable_pre_4')
    b6 = types.InlineKeyboardButton('–°–±', callback_data='timetable_pre_5')
    keyboard.add(b1, b2, b3)
    keyboard.add(b4, b5, b6)

    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    back_b = types.InlineKeyboardButton('–ù–∞–∑–∞–¥ ‚Ü©Ô∏è', callback_data='timetable_weeks')
    keyboard.add(back_b)
    return keyboard


def days_now_keyboard():
    keyboard = types.InlineKeyboardMarkup()
    b1 = types.InlineKeyboardButton('–ü–Ω', callback_data='timetable_now_0')
    b2 = types.InlineKeyboardButton('–í—Ç', callback_data='timetable_now_1')
    b3 = types.InlineKeyboardButton('–°—Ä', callback_data='timetable_now_2')
    b4 = types.InlineKeyboardButton('–ß—Ç', callback_data='timetable_now_3')
    b5 = types.InlineKeyboardButton('–ü—Ç', callback_data='timetable_now_4')
    b6 = types.InlineKeyboardButton('–°–±', callback_data='timetable_now_5')
    keyboard.add(b1, b2, b3)
    keyboard.add(b4, b5, b6)

    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    back_b = types.InlineKeyboardButton('–ù–∞–∑–∞–¥ ‚Ü©Ô∏è', callback_data='timetable_weeks')
    keyboard.add(back_b)
    return keyboard


def days_next_keyboard():
    keyboard = types.InlineKeyboardMarkup()
    b1 = types.InlineKeyboardButton('–ü–Ω', callback_data='timetable_next_0')
    b2 = types.InlineKeyboardButton('–í—Ç', callback_data='timetable_next_1')
    b3 = types.InlineKeyboardButton('–°—Ä', callback_data='timetable_next_2')
    b4 = types.InlineKeyboardButton('–ß—Ç', callback_data='timetable_next_3')
    b5 = types.InlineKeyboardButton('–ü—Ç', callback_data='timetable_next_4')
    b6 = types.InlineKeyboardButton('–°–±', callback_data='timetable_next_5')
    keyboard.add(b1, b2, b3)
    keyboard.add(b4, b5, b6)

    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    back_b = types.InlineKeyboardButton('–ù–∞–∑–∞–¥ ‚Ü©Ô∏è', callback_data='timetable_weeks')
    keyboard.add(back_b)
    return keyboard


# ---------------------------------------------------------------
# –†–∞–±–æ—Ç–∞ —Å users.txt
# ---------------------------------------------------------------


def create_user():
    user = {'login': '', 'password': '', 'pages': {}, 'from_invite_code': False, 'invite_code': False, 'k': False}
    return user


def delete_user(message):
    users = get_users()
    users.pop(message.chat.id)
    save_users(users)


def save_users(users):
    with open('users.txt', 'wb') as file:
        pickle.dump(users, file)


def get_users():
    with open('users.txt', 'rb') as file:
        users = pickle.load(file)
        return users


def reset_users_file():
    with open('users.txt', 'wb') as file:
        pickle.dump({}, file)
    print('users.txt reset')


# ---------------------------------------------------------------
# –†–∞–±–æ—Ç–∞ —Å –∏–Ω–≤–∞–π—Ç-–∫–æ–¥–∞–∞–º–∏
# ---------------------------------------------------------------


def if_user_had_invite_code(message):
    invite_codes = get_invite_codes()

    for invite_code in invite_codes:
        invite_code_data = invite_codes[invite_code]

        if message.chat.id == invite_code_data['owner']:
            log(message, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–≤–∞–ª –ò–Ω–≤–∞–π—Ç-–∫–æ–¥ - {Fore.MAGENTA}{invite_code}')
            return invite_code
    return False


def remove_invite_code(invite_code, message):
    invite_codes = get_invite_codes()
    invite_codes.pop(invite_code)
    save_invite_codes(invite_codes)
    log(message, f'{Fore.MAGENTA}{invite_code}{Fore.RESET} —É–¥–∞–ª—ë–Ω')


def is_invite_code_exist(invite_code):
    invite_codes = get_invite_codes()
    if invite_code in invite_codes:
        return True
    else:
        return False


def new_invite_code(message):
    # –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    users = get_users()
    user = users[message.chat.id]

    invite_code = secrets.token_hex()[:7]
    invite_codes = get_invite_codes()
    invite_codes[invite_code] = {'login': user['login'], 'password': user['password'], 'owner': message.chat.id}
    save_invite_codes(invite_codes)
    return invite_code


def save_invite_codes(invite_codes):
    with open('invite_codes.txt', 'wb') as file:
        pickle.dump(invite_codes, file)


def get_invite_codes():
    with open('invite_codes.txt', 'rb') as file:
        invite_codes = pickle.load(file)
        return invite_codes


def reset_invite_codes_file():
    with open('invite_codes.txt', 'wb') as file:
        pickle.dump({}, file)
    print('invite_codes.txt reset')


def log(message, text):
    dt = datetime.datetime.strftime(datetime.datetime.now(), '[%d/%m/%y | %R]')
    print(f'{Fore.YELLOW}{dt} {Fore.BLUE}{message.chat.id}: {Fore.RESET}{text}')


if __name__ == '__main__':
    # –°—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ users.txt
    if os.path.getsize('users.txt') == 0:
        reset_users_file()

    # –°—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ invite_codes.txt
    if os.path.getsize('invite_codes.txt') == 0:
        reset_invite_codes_file()

    # reset_users_file()
    # reset_invite_codes_file()

    bot.skip_pending = True
    print('Bot started successfully')
    bot.polling(none_stop=True, interval=2)

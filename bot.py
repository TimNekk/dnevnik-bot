import telebot
from telebot import types
import pickle
import os
import networking as nw
import scraping as s
import datetime
import secrets

bot = telebot.TeleBot('983970585:AAHtqErypinRDlQ7mPlUVC_dgfZ085CAGFk')  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞


# ---------------------------------------------------------------
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
# ---------------------------------------------------------------


@bot.message_handler(commands=['start'])
def start_message_manager(message):
    users = get_users()

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if message.chat.id in users:
        user = users[message.chat.id]

        # –ï—Å—Ç—å –ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user['pages']:
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            name = s.get_fio(user['pages']['timetable_now'])
            text = f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {name}\n'  # TODO - –ü–æ–ª—É—á–µ–Ω–µ–∏ –∏–º–µ–Ω–∏ –∏ —Ñ–∞–º–∏–ª–∏–∏ –∏–∑ timetable_page
            bot.send_message(message.chat.id, text, reply_markup=get_main_keyboard())
        else:
            set_user_pages(message)

    # –ï—Å–ª–∏ –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    else:
        print(f'–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} - {message.chat.id}')
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—Å—è
        user = create_user()
        users[message.chat.id] = user
        save_users(users)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        if message.from_user.first_name:  # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∏–∫ –∏–ª–∏ –∏–º—è
            text = f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!'
        else:
            text = f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.username}!'
        text += '\n–Ø - –î–Ω–µ–≤–Ω–∏–∫ –ë–æ—Ç üòÑ\n\n–ú–æ–∂–µ—à—å –≤–æ–π—Ç–∏ –≤ —Å–≤–æ—é —É—á–µ—Ç–Ω—É—é –∑–∞–ø–∏—Å—å –∏–ª–∏ –≤–≤–µ—Å—Ç–∏ –∏–Ω–≤–∞–π—Ç-–∫–æ–¥'
        bot.send_message(message.chat.id, text, reply_markup=get_keyboard_new_user())


# ---------------------------------------------------------------
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ Callback
# ---------------------------------------------------------------


@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    # –í–æ–π—Ç–∏
    if call.data == 'login':
        bot.delete_message(call.message.chat.id, call.message.message_id)  # –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        get_user_login(call.message)  # –ü–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏–Ω –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –ò–Ω–≤–∞–π—Ç-–∫–æ–¥
    elif call.data == 'invite-code':
        bot.delete_message(call.message.chat.id, call.message.message_id)  # –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        use_invite_code(call.message)


    # –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    elif call.data == 'main_menu':
        bot.delete_message(call.message.chat.id, call.message.message_id)  # –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        start_message_manager(call.message)  # –ü–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏–Ω –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    elif call.data == 'timetable':
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        text = '–ù–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å –ø–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ?'
        bot.edit_message_text(text, call.message.chat.id, call.message.message_id,
                              reply_markup=get_timetable_keyboard())

    # –°–µ–≥–æ–¥–Ω—è
    elif call.data == 'timetable_today':
        weekday = datetime.date.today().weekday() + 1  # –°–µ–≥–æ–¥–Ω—è
        if weekday == 5 or weekday == 6:  # –ï—Å–ª–∏ —Å—É–±–±–æ—Ç–∞ –∏–ª–∏ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω–∏–µ
            weekday = 4  # –¢–æ–≥–¥–∞ –ø—è—Ç–Ω–∏—Ü–∞
        send_timetable(call.message, weekday, 'timetable_now')

    # –ó–∞–≤—Ç—Ä–∞
    elif call.data == 'timetable_tomorrow':
        weekday = (datetime.date.today() + datetime.timedelta(days=1)).weekday()  # –ó–∞–≤—Ç—Ä–∞
        if weekday == 5 or weekday == 6:  # –ï—Å–ª–∏ —Å—É–±–±–æ—Ç–∞ –∏–ª–∏ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω–∏–µ
            weekday = 0  # –¢–æ–≥–¥–∞ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
            send_timetable(call.message, weekday, 'timetable_next')
        else:
            send_timetable(call.message, weekday, 'timetable_now')

    # –î—Ä—É–≥–æ–π –¥–µ–Ω—å
    elif call.data == 'timetable_weeks':
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        text = '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–¥–µ–ª—é'
        bot.edit_message_text(text, call.message.chat.id, call.message.message_id,
                              reply_markup=get_weeks_keyboard())

    # –ü—Ä–æ—à–ª–∞—è –Ω–µ–¥–µ–ª—è
    elif call.data == 'timetable_pre':
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        text = '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–∞ –ø—Ä–æ—à–ª–æ–π –Ω–µ–¥–µ–ª–µ'
        bot.edit_message_text(text, call.message.chat.id, call.message.message_id,
                              reply_markup=get_days_pre_keyboard())
    elif call.data == 'timetable_pre_0':
        send_timetable(call.message, 0, 'timetable_pre')
    elif call.data == 'timetable_pre_1':
        send_timetable(call.message, 1, 'timetable_pre')
    elif call.data == 'timetable_pre_2':
        send_timetable(call.message, 2, 'timetable_pre')
    elif call.data == 'timetable_pre_3':
        send_timetable(call.message, 3, 'timetable_pre')
    elif call.data == 'timetable_pre_4':
        send_timetable(call.message, 4, 'timetable_pre')
    elif call.data == 'timetable_pre_5':
        send_timetable(call.message, 5, 'timetable_pre')

    # –¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è
    elif call.data == 'timetable_now':
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        text = '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–∞ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–µ'
        bot.edit_message_text(text, call.message.chat.id, call.message.message_id,
                              reply_markup=get_days_now_keyboard())
    elif call.data == 'timetable_now_0':
        send_timetable(call.message, 0, 'timetable_now')
    elif call.data == 'timetable_now_1':
        send_timetable(call.message, 1, 'timetable_now')
    elif call.data == 'timetable_now_2':
        send_timetable(call.message, 2, 'timetable_now')
    elif call.data == 'timetable_now_3':
        send_timetable(call.message, 3, 'timetable_now')
    elif call.data == 'timetable_now_4':
        send_timetable(call.message, 4, 'timetable_now')
    elif call.data == 'timetable_now_5':
        send_timetable(call.message, 5, 'timetable_now')

    # –°–ª–µ–¥. –Ω–µ–¥–µ–ª—è
    elif call.data == 'timetable_next':
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        text = '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–∞ —Å–ª–µ–¥. –Ω–µ–¥–µ–ª–µ'
        bot.edit_message_text(text, call.message.chat.id, call.message.message_id,
                              reply_markup=get_days_next_keyboard())
    elif call.data == 'timetable_next_0':
        send_timetable(call.message, 0, 'timetable_next')
    elif call.data == 'timetable_next_1':
        send_timetable(call.message, 1, 'timetable_next')
    elif call.data == 'timetable_next_2':
        send_timetable(call.message, 2, 'timetable_next')
    elif call.data == 'timetable_next_3':
        send_timetable(call.message, 3, 'timetable_next')
    elif call.data == 'timetable_next_4':
        send_timetable(call.message, 4, 'timetable_next')
    elif call.data == 'timetable_next_5':
        send_timetable(call.message, 5, 'timetable_next')

    # –ù–∞—Å—Ç—Ç—Ä–æ–π–∫–∏
    elif call.data == 'settings':
        send_settings(call.message)


# ---------------------------------------------------------------
# –§—É–Ω–∫—Ü–∏–∏
# ---------------------------------------------------------------


def use_invite_code()



def send_settings(message):
    # –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    users = get_users()
    user = users[message.chat.id]

    text = f'–ò–Ω–≤–∞–π—Ç-–∫–æ–¥: '
    if user['invite_code']:




def send_timetable(message, weekday, page_name):
    # –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    users = get_users()
    user = users[message.chat.id]

    # –ü–æ–ª—É—á–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    lessons = s.get_timetable(user['pages'][page_name], weekday)
    numbers = ['1Ô∏è‚É£', '2Ô∏è‚É£', '3Ô∏è‚É£', '4Ô∏è‚É£', '5Ô∏è‚É£', '6Ô∏è‚É£', '7Ô∏è‚É£']  # –ö–≤–∞–¥—Ä–∞—Ç–∏–∫–∏ —Å —Ü–∏—Ñ—Ä–∞–º–∏
    if lessons:
        text = ''
        for i, lesson in enumerate(lessons, 0):  # –ü—Ä–æ—Ö–æ–¥ —á–µ—Ä–µ–∑ –≤—Å–µ —É—Ä–æ–∫–∏
            # –ù–∞–∑–≤–∞–Ω–∏–µ
            text += f'*{numbers[i]} {lesson[0]}'

            # –û—Ü–µ–Ω–∫–∏
            if lesson[2]:
                text += ' | '
                for mark in lesson[2]:
                    text += f'{mark} '
            text += '*'

            # –ó–∞–¥–∞–Ω–∏–µ
            if lesson[1]:
                text += f'\n_{lesson[1]}_\n\n'
            else:
                text += '\n\n'
    else:
        text = '–ù–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è'

    bot.edit_message_text(text, message.chat.id, message.message_id, reply_markup=get_back_keyboard(), parse_mode='Markdown')


def get_user_login(message):
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    text = '–í–≤–µ–¥–∏—Ç–µ *–õ–æ–≥–∏–Ω* _(—Ç–µ–ª–µ—Ñ–æ–Ω, email –∏–ª–∏ –°–ù–ò–õ–°)_'
    msg = bot.send_message(message.chat.id, text, parse_mode='Markdown')

    bot.register_next_step_handler(msg, process_user_login)


def process_user_login(message):
    # –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    users = get_users()
    user = users[message.chat.id]

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ª–æ–≥–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    login = message.text
    user['login'] = login
    save_users(users)

    get_user_password(message)


def get_user_password(message):
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    text = '–í–≤–µ–¥–∏—Ç–µ *–ü–∞—Ä–æ–ª—å*'
    msg = bot.send_message(message.chat.id, text, parse_mode='Markdown')

    bot.register_next_step_handler(msg, process_user_password)


def process_user_password(message):
    # –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    users = get_users()
    user = users[message.chat.id]

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    password = message.text
    user['password'] = password
    save_users(users)

    set_user_pages(message)


def set_user_pages(message):
    # –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    users = get_users()
    user = users[message.chat.id]

    # –£–¥–∞–ª–µ–Ω–∏–µ 4 –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    for i in range(4):
        bot.delete_message(message.chat.id, message.message_id - i)

    pages = nw.get_diary_pages(user['login'], user['password'])

    if pages:
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user['pages']['timetable_now'] = pages[0]
        user['pages']['timetable_next'] = pages[1]
        user['pages']['timetable_pre'] = pages[2]
        user['pages']['marks'] = pages[3]
        save_users(users)
    else:
        print('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞')
        delete_user(message)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        text = '‚ùå *–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ* ‚ùå'
        msg = bot.send_message(message.chat.id, text, parse_mode='Markdown')

    start_message_manager(message)


# ---------------------------------------------------------------
# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
# ---------------------------------------------------------------


def get_back_keyboard():
    keyboard = types.InlineKeyboardMarkup()
    back_b = types.InlineKeyboardButton('–ù–∞–∑–∞–¥ ‚Ü©Ô∏è', callback_data='main_menu')
    keyboard.add(back_b)
    return keyboard


def get_keyboard_new_user():
    keyboard = types.InlineKeyboardMarkup()
    b1 = types.InlineKeyboardButton('–í–æ–π—Ç–∏', callback_data='login')
    b2 = types.InlineKeyboardButton('–ò–Ω–≤–∞–π—Ç-–∫–æ–¥', callback_data='invite-code')
    keyboard.add(b1, b2)
    return keyboard


def get_main_keyboard():
    keyboard = types.InlineKeyboardMarkup()
    b1 = types.InlineKeyboardButton('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ', callback_data='timetable')
    b2 = types.InlineKeyboardButton('–û—Ü–µ–Ω–∫–∏', callback_data='marks')
    b3 = types.InlineKeyboardButton('–ù–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data='settings')
    keyboard.add(b1, b2)
    keyboard.add(b3)
    return keyboard


def get_timetable_keyboard():
    keyboard = types.InlineKeyboardMarkup()
    b1 = types.InlineKeyboardButton('–°–µ–≥–æ–¥–Ω—è', callback_data='timetable_today')
    b2 = types.InlineKeyboardButton('–ó–∞–≤—Ç—Ä–∞', callback_data='timetable_tomorrow')
    b3 = types.InlineKeyboardButton('–î—Ä—É–≥–æ–π –¥–µ–Ω—å', callback_data='timetable_weeks')
    keyboard.add(b1, b2, b3)

    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    back_b = types.InlineKeyboardButton('–ù–∞–∑–∞–¥ ‚Ü©Ô∏è', callback_data='main_menu')
    keyboard.add(back_b)
    return keyboard


# def get_weeks_keyboard():
#     keyboard = types.InlineKeyboardMarkup()
#     b1 = types.InlineKeyboardButton('–ü—Ä–æ—à–ª–∞—è –Ω–µ–¥–µ–ª—è', callback_data='timetable_pre')
#     b2 = types.InlineKeyboardButton('–¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è', callback_data='timetable_now')
#     b3 = types.InlineKeyboardButton('–°–ª–µ–¥. –Ω–µ–¥–µ–ª—è', callback_data='timetable_next')
#     keyboard.add(b1)
#     keyboard.add(b2)
#     keyboard.add(b3)
#
#     # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
#     back_b = types.InlineKeyboardButton('–ù–∞–∑–∞–¥ ‚Ü©Ô∏è', callback_data='timetable')
#     keyboard.add(back_b)
#     return keyboard

def get_weeks_keyboard():
    keyboard = types.InlineKeyboardMarkup()
    b1 = types.InlineKeyboardButton('–ü—Ä–æ—à–ª–∞—è', callback_data='timetable_pre')
    b2 = types.InlineKeyboardButton('–¢–µ–∫—É—â–∞—è', callback_data='timetable_now')
    b3 = types.InlineKeyboardButton('–°–ª–µ–¥.', callback_data='timetable_next')
    keyboard.add(b1, b2, b3)

    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    back_b = types.InlineKeyboardButton('–ù–∞–∑–∞–¥ ‚Ü©Ô∏è', callback_data='timetable')
    keyboard.add(back_b)
    return keyboard


def get_days_pre_keyboard():
    keyboard = types.InlineKeyboardMarkup()
    b1 = types.InlineKeyboardButton('–ü–Ω', callback_data='timetable_pre_0')
    b2 = types.InlineKeyboardButton('–í—Ç', callback_data='timetable_pre_1')
    b3 = types.InlineKeyboardButton('–°—Ä', callback_data='timetable_pre_2')
    b4 = types.InlineKeyboardButton('–ß—Ç', callback_data='timetable_pre_3')
    b5 = types.InlineKeyboardButton('–ü—Ç', callback_data='timetable_pre_4')
    b6 = types.InlineKeyboardButton('–°–±', callback_data='timetable_pre_5')
    keyboard.add(b1, b2, b3)
    keyboard.add(b4, b5, b6)

    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    back_b = types.InlineKeyboardButton('–ù–∞–∑–∞–¥ ‚Ü©Ô∏è', callback_data='timetable_weeks')
    keyboard.add(back_b)
    return keyboard


def get_days_now_keyboard():
    keyboard = types.InlineKeyboardMarkup()
    b1 = types.InlineKeyboardButton('–ü–Ω', callback_data='timetable_now_0')
    b2 = types.InlineKeyboardButton('–í—Ç', callback_data='timetable_now_1')
    b3 = types.InlineKeyboardButton('–°—Ä', callback_data='timetable_now_2')
    b4 = types.InlineKeyboardButton('–ß—Ç', callback_data='timetable_now_3')
    b5 = types.InlineKeyboardButton('–ü—Ç', callback_data='timetable_now_4')
    b6 = types.InlineKeyboardButton('–°–±', callback_data='timetable_now_5')
    keyboard.add(b1, b2, b3)
    keyboard.add(b4, b5, b6)

    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    back_b = types.InlineKeyboardButton('–ù–∞–∑–∞–¥ ‚Ü©Ô∏è', callback_data='timetable_weeks')
    keyboard.add(back_b)
    return keyboard


def get_days_next_keyboard():
    keyboard = types.InlineKeyboardMarkup()
    b1 = types.InlineKeyboardButton('–ü–Ω', callback_data='timetable_next_0')
    b2 = types.InlineKeyboardButton('–í—Ç', callback_data='timetable_next_1')
    b3 = types.InlineKeyboardButton('–°—Ä', callback_data='timetable_next_2')
    b4 = types.InlineKeyboardButton('–ß—Ç', callback_data='timetable_next_3')
    b5 = types.InlineKeyboardButton('–ü—Ç', callback_data='timetable_next_4')
    b6 = types.InlineKeyboardButton('–°–±', callback_data='timetable_next_5')
    keyboard.add(b1, b2, b3)
    keyboard.add(b4, b5, b6)

    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    back_b = types.InlineKeyboardButton('–ù–∞–∑–∞–¥ ‚Ü©Ô∏è', callback_data='timetable_weeks')
    keyboard.add(back_b)
    return keyboard


# ---------------------------------------------------------------
# –†–∞–±–æ—Ç–∞ —Å users.txt
# ---------------------------------------------------------------


def create_user():
    user = {'login': '', 'password': '', 'pages': {}, 'from_invite_code': False, 'invite_code': False}
    return user


def delete_user(message):
    users = get_users()
    users.pop(message.chat.id)
    save_users(users)


def save_users(users):
    with open('users.txt', 'wb') as file:
        pickle.dump(users, file)


def get_users():
    with open('users.txt', 'rb') as file:
        users = pickle.load(file)
        return users


def reset_users_file():
    with open('users.txt', 'wb') as file:
        pickle.dump({}, file)
    print('users.txt reset')


# ---------------------------------------------------------------
# –†–∞–±–æ—Ç–∞ —Å –∏–Ω–≤–∞–π—Ç-–∫–æ–¥–∞–∞–º–∏
# ---------------------------------------------------------------


def create_invite_code(user):
    invite_code = secrets.token_hex()[:7]
    invite_codes = get_invite_codes()
    invite_codes[invite_code] = {'login': user['login'], 'password': user['password']}
    save_invite_codes(invite_codes)
    return invite_code


def save_invite_codes(invite_codes):
    with open('invite_codes.txt', 'wb') as file:
        pickle.dump(invite_codes, file)


def get_invite_codes():
    with open('invite_codes.txt', 'rb') as file:
        invite_codes = pickle.load(file)
        return invite_codes


def reset_invite_codes_file():
    with open('invite_codes.txt', 'wb') as file:
        pickle.dump({}, file)
    print('invite_codes.txt reset')


if __name__ == '__main__':
    # –°—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ users.txt
    if os.path.getsize('users.txt') == 0:
        reset_users_file()

    # reset_users_file()
    # reset_invite_codes_file()

    bot.skip_pending = True
    print('Bot started successfully')
    bot.polling(none_stop=True, interval=2)